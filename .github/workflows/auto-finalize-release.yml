name: Auto-Finalize Release

on:
  push:
    branches: [ main ]

jobs:
  auto-finalize-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Detect release merge - Git-based detection
      id: detect_release
      run: |
        echo "üîç Analyzing git history for release merge..."
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫–æ–º–º–∏—Ç–µ
        CURRENT_COMMIT="${{ github.sha }}"
        echo "üìù Current commit: $CURRENT_COMMIT"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ merge commit
        PARENT_COUNT=$(git rev-list --count --parents -n 1 $CURRENT_COMMIT | awk '{print NF-1}')
        echo "üë• Parent count: $PARENT_COUNT"
        
        IS_RELEASE="false"
        RELEASE_VERSION=""
        RELEASE_TYPE=""
        DETECTION_METHOD=""
        
        if [ "$PARENT_COUNT" -ge 2 ]; then
          echo "üîÄ This is a merge commit, analyzing merge..."
          
          # –ü–æ–ª—É—á–∞–µ–º –≤—Ç–æ—Ä–æ–π parent (merged branch)
          MERGED_BRANCH_COMMIT=$(git rev-parse ${CURRENT_COMMIT}^2)
          
          # –ò—â–µ–º release/hotfix –≤–µ—Ç–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ merged commit
          RELEASE_BRANCHES=$(git branch -r --contains $MERGED_BRANCH_COMMIT | grep -E "(release|hotfix)/v[0-9]+\.[0-9]+\.[0-9]+" || echo "")
          
          if [ -n "$RELEASE_BRANCHES" ]; then
            echo "‚úÖ Found release/hotfix branches: $RELEASE_BRANCHES"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ –≤–µ—Ç–∫–∏
            RELEASE_VERSION=$(echo "$RELEASE_BRANCHES" | grep -oE "v[0-9]+\.[0-9]+\.[0-9]+" | head -1 | sed 's/v//')
            
            if echo "$RELEASE_BRANCHES" | grep -q "release/"; then
              RELEASE_TYPE="regular"
              DETECTION_METHOD="git-branch-analysis"
            elif echo "$RELEASE_BRANCHES" | grep -q "hotfix/"; then
              RELEASE_TYPE="hotfix"
              DETECTION_METHOD="git-branch-analysis"
            fi
            
            IS_RELEASE="true"
            echo "‚úÖ Detected $RELEASE_TYPE release: v$RELEASE_VERSION via $DETECTION_METHOD"
          fi
        fi
        
        # Fallback 1: –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–µ—Ä—Å–∏–∏ –≤ pyproject.toml
        if [ "$IS_RELEASE" = "false" ]; then
          echo "üîç Fallback: Checking version changes in pyproject.toml..."
          
          # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–º–º–∏—Ç–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º (—Ç–æ–ª—å–∫–æ –≤ —Å–µ–∫—Ü–∏–∏ [project])
          CURRENT_VERSION=$(git show HEAD:pyproject.toml | sed -n '/^\[project\]/,/^\[/p' | grep -oP 'version = "\K[^"]+' | head -1 || echo "")
          PREVIOUS_VERSION=$(git show HEAD~1:pyproject.toml | sed -n '/^\[project\]/,/^\[/p' | grep -oP 'version = "\K[^"]+' | head -1 || echo "")
          
          if [ -n "$CURRENT_VERSION" ] && [ -n "$PREVIOUS_VERSION" ] && [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "üìà Version changed: $PREVIOUS_VERSION ‚Üí $CURRENT_VERSION"
            
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π (—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
            if python3 -c "import sys; from packaging import version; sys.exit(0 if version.parse('$CURRENT_VERSION') > version.parse('$PREVIOUS_VERSION') else 1)"; then
              RELEASE_VERSION="$CURRENT_VERSION"
              RELEASE_TYPE="regular"
              DETECTION_METHOD="version-change-analysis"
              IS_RELEASE="true"
              echo "‚úÖ Detected release via version bump: v$RELEASE_VERSION"
            fi
          fi
        fi
        
        # Fallback 2: –ê–Ω–∞–ª–∏–∑ commit message (legacy support)
        if [ "$IS_RELEASE" = "false" ]; then
          echo "üîç Fallback: Analyzing commit messages..."
          
          MERGE_MSG="${{ github.event.head_commit.message }}"
          echo "üìù Commit message: $MERGE_MSG"
          
          # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –º–µ—Ä–∂–∞
          RELEASE_VERSION_MSG=$(echo "$MERGE_MSG" | grep -oP "(Release|release)/v\K[0-9]+\.[0-9]+\.[0-9]+" || echo "")
          HOTFIX_VERSION_MSG=$(echo "$MERGE_MSG" | grep -oP "(Hotfix|hotfix)/v\K[0-9]+\.[0-9]+\.[0-9]+" || echo "")
          
          # –¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ GitHub —Ñ–æ—Ä–º–∞—Ç–∞
          if [ -z "$RELEASE_VERSION_MSG" ]; then
            RELEASE_VERSION_MSG=$(echo "$MERGE_MSG" | grep -oP "Merge pull request #\d+ from [^/]+/release/v\K[0-9]+\.[0-9]+\.[0-9]+" || echo "")
          fi
          
          if [ -z "$HOTFIX_VERSION_MSG" ]; then
            HOTFIX_VERSION_MSG=$(echo "$MERGE_MSG" | grep -oP "Merge pull request #\d+ from [^/]+/hotfix/v\K[0-9]+\.[0-9]+\.[0-9]+" || echo "")
          fi
          
          if [ -n "$RELEASE_VERSION_MSG" ]; then
            IS_RELEASE="true"
            RELEASE_VERSION="$RELEASE_VERSION_MSG"
            RELEASE_TYPE="regular"
            DETECTION_METHOD="commit-message-analysis"
            echo "‚úÖ Detected regular release via commit message: v$RELEASE_VERSION"
          elif [ -n "$HOTFIX_VERSION_MSG" ]; then
            IS_RELEASE="true"
            RELEASE_VERSION="$HOTFIX_VERSION_MSG"
            RELEASE_TYPE="hotfix"
            DETECTION_METHOD="commit-message-analysis"
            echo "‚úÖ Detected hotfix release via commit message: v$RELEASE_VERSION"
          fi
        fi
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if [ "$IS_RELEASE" = "true" ]; then
          echo "üîç Validating detected release..."
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–µ—Ä—Å–∏–∏
          if [[ ! "$RELEASE_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format: $RELEASE_VERSION"
            IS_RELEASE="false"
          fi
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–µ–≥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–∂–æ–±–µ release)
          if [ "$IS_RELEASE" = "true" ] && git tag -l | grep -q "^v$RELEASE_VERSION$"; then
            echo "‚ùå Tag v$RELEASE_VERSION already exists"
            IS_RELEASE="false"
          fi
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –Ω–∞ main –≤–µ—Ç–∫–µ
          CURRENT_BRANCH=$(git branch --show-current || git rev-parse --abbrev-ref HEAD)
          if [ "$IS_RELEASE" = "true" ] && [ "$CURRENT_BRANCH" != "main" ]; then
            echo "‚ùå Not on main branch, currently on: $CURRENT_BRANCH"
            IS_RELEASE="false"
          fi
        fi
        
        if [ "$IS_RELEASE" = "false" ]; then
          echo "‚ÑπÔ∏è No release detected, skipping finalization"
        else
          echo "üéâ Release detection successful!"
          echo "   Version: v$RELEASE_VERSION"
          echo "   Type: $RELEASE_TYPE"
          echo "   Method: $DETECTION_METHOD"
        fi
        
        echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT
        echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
        echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
        echo "detection_method=$DETECTION_METHOD" >> $GITHUB_OUTPUT

    - name: Install uv
      if: steps.detect_release.outputs.is_release == 'true'
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      if: steps.detect_release.outputs.is_release == 'true'
      run: uv python install 3.12

    - name: Install dependencies
      if: steps.detect_release.outputs.is_release == 'true'
      run: uv sync --all-extras --dev

    - name: Install packaging for version comparison
      run: pip install packaging

    - name: Install GitHub CLI
      if: steps.detect_release.outputs.is_release == 'true'
      run: |
        # Install GitHub CLI for issue creation in case of merge conflicts
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh -y

    - name: Configure Git
      if: steps.detect_release.outputs.is_release == 'true'
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Validate release readiness
      if: steps.detect_release.outputs.is_release == 'true'
      run: |
        echo "üîç Validating release readiness..."
        
        # Check that version in pyproject.toml matches detected version (only in [project] section)
        PYPROJECT_VERSION=$(sed -n '/^\[project\]/,/^\[/p' pyproject.toml | grep -oP 'version = "\K[^"]+' | head -1)
        if [ "$PYPROJECT_VERSION" != "${{ steps.detect_release.outputs.version }}" ]; then
          echo "‚ùå Version mismatch: pyproject.toml has $PYPROJECT_VERSION, detected ${{ steps.detect_release.outputs.version }}"
          exit 1
        fi
        
        # Check that tag doesn't already exist
        if git tag -l | grep -q "^v${{ steps.detect_release.outputs.version }}$"; then
          echo "‚ùå Tag v${{ steps.detect_release.outputs.version }} already exists"
          exit 1
        fi
        
        # Check that we're on main branch
        CURRENT_BRANCH=$(git branch --show-current)
        if [ "$CURRENT_BRANCH" != "main" ]; then
          echo "‚ùå Not on main branch, currently on: $CURRENT_BRANCH"
          exit 1
        fi
        
        echo "‚úÖ Release validation passed"

    - name: Wait for CI to complete
      if: steps.detect_release.outputs.is_release == 'true'
      run: |
        echo "‚è≥ Waiting 30 seconds for CI pipeline to complete..."
        sleep 30

    - name: Run finalize release script
      if: steps.detect_release.outputs.is_release == 'true'
      run: |
        echo "üöÄ Auto-finalizing ${{ steps.detect_release.outputs.release_type }} release v${{ steps.detect_release.outputs.version }}"
        uv run python scripts/finalize_release.py --version ${{ steps.detect_release.outputs.version }} --skip-ci-check

    - name: Create summary
      if: steps.detect_release.outputs.is_release == 'true'
      run: |
        RELEASE_TYPE="${{ steps.detect_release.outputs.release_type }}"
        VERSION="${{ steps.detect_release.outputs.version }}"
        DETECTION_METHOD="${{ steps.detect_release.outputs.detection_method }}"
        
        if [ "$RELEASE_TYPE" = "hotfix" ]; then
          EMOJI="üö®"
          TYPE_TEXT="Hotfix"
        else
          EMOJI="üéâ"
          TYPE_TEXT="Release"
        fi
        
        echo "## $EMOJI $TYPE_TEXT v$VERSION Auto-Finalized!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîç Detection Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Detection Method**: $DETECTION_METHOD" >> $GITHUB_STEP_SUMMARY
        echo "- **Release Type**: $RELEASE_TYPE" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Release Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- **PyPI Package**: https://pypi.org/project/mcp-optimizer/$VERSION/" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Image**: \`ghcr.io/dmitryanchikov/mcp-optimizer:$VERSION\`" >> $GITHUB_STEP_SUMMARY
        echo "- **GitHub Release**: https://github.com/dmitryanchikov/mcp-optimizer/releases/tag/v$VERSION" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚úÖ Automated Actions Completed" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Created and pushed release tag" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Triggered PyPI publication" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Triggered Docker image publication" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Merged main back to develop" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Cleaned up release branch" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîí Security & Reliability" >> $GITHUB_STEP_SUMMARY
        echo "This release was automatically detected through:" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Merge from protected release/hotfix branch" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Required PR approvals and checks" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Branch protection rules enforcement" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Version validation and consistency checks" >> $GITHUB_STEP_SUMMARY

    - name: Notify completion
      if: steps.detect_release.outputs.is_release == 'true'
      run: |
        RELEASE_TYPE="${{ steps.detect_release.outputs.release_type }}"
        VERSION="${{ steps.detect_release.outputs.version }}"
        
        if [ "$RELEASE_TYPE" = "hotfix" ]; then
          echo "üö® Hotfix v$VERSION has been automatically finalized!"
        else
          echo "‚úÖ Release v$VERSION has been automatically finalized!"
        fi
        echo "üéâ All release artifacts are being published automatically."
        echo ""
        echo "üìä Monitor the release progress:"
        echo "- GitHub Actions: https://github.com/dmitryanchikov/mcp-optimizer/actions"