name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'release/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Run linting
      run: |
        uv run ruff check src/ tests/
        uv run ruff format --check src/ tests/

    - name: Run type checking
      run: uv run mypy src/

    - name: Run tests
      run: uv run pytest tests/ -v --cov=mcp_optimizer --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Install bandit explicitly (fallback)
      run: uv add --dev bandit --no-sync || true

    - name: Verify bandit installation
      run: uv run bandit --version

    - name: Run security scan
      run: uv run bandit -r src/ -f json -o bandit-report.json

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: bandit-report.json

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/hotfix/')
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}
          type=match,pattern=release/v(.*),group=1,suffix=-rc
          type=match,pattern=hotfix/v(.*),group=1,suffix=-hotfix

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    needs: [test, security, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && github.ref_type == 'tag'
    permissions:
      contents: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Build package
      run: uv build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}

  # Release candidate job for release branches
  release-candidate:
    needs: [test, security, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/')
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Extract version from branch
      id: version
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/release/}
        VERSION=${BRANCH_NAME#v}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "rc_version=${VERSION}-rc.${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT

    - name: Update version for RC
      run: |
        sed -i 's/version = ".*"/version = "${{ steps.version.outputs.rc_version }}"/' pyproject.toml

    - name: Build package
      run: uv build

    - name: Create Release Candidate Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.rc_version }}
        name: Release Candidate v${{ steps.version.outputs.rc_version }}
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: true
        body: |
          üöÄ **Release Candidate for v${{ steps.version.outputs.version }}**
          
          This is a release candidate build from the `release/v${{ steps.version.outputs.version }}` branch.
          
          **‚ö†Ô∏è This is a pre-release version intended for testing purposes only.**
          
          Please test this release candidate and report any issues before the final release.
          
          **Installation:**
          ```bash
          pip install mcp-optimizer==${{ steps.version.outputs.rc_version }}
          ```
          
          **Docker:**
          ```bash
          docker pull ghcr.io/dmitryanchikov/mcp-optimizer:${{ steps.version.outputs.version }}-rc
          ```
